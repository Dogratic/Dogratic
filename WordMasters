
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Word Masters</title>
    <link rel="stylesheet" href="./word-masters.css" />
<style>
    * {
  box-sizing: border-box;
}

body {
  /* a nice font that uses a user's built in font */
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;

  color: #333;
  margin: 0;
  padding: 0;
}

.navbar {
  border-bottom: 2px solid #333;
  padding: 15px;
  text-align: center;
  margin-bottom: 0;
}

.brand {
  font-size: 30px;
}

.scoreboard {
  max-width: 295px;
  width: 100%;
  margin: 10px auto;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  row-gap: 10px;
  column-gap: 5px;
}

.scoreboard-letter {
  height: 45px;
  width: 45px;
  font-size: 30px;
  text-transform: uppercase;
  border: 3px solid #ccc;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
}

.correct {
  background-color: darkgreen;
  color: white;
}

.close {
  background-color: goldenrod;
  color: white;
}

.wrong {
  background-color: #888;
  color: white; 
}

.invalid {
  animation: flash 1s;
}

/* flashes red border and then fades back to gray */
@keyframes flash {
  5% {
    border-color: crimson;
  }

  100% {
    border-color: #ccc;
  }
}

.spiral {
  font-size: 40px;
  animation: spin 1.5s linear infinite;
}

/* rotates clockwise indefinitely */
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* visibility hidden means the item is still there and taking up space
   but just not shown. display: none doesn't take up space */
.hidden {
  visibility: hidden;
}

.info-bar {
  display: flex;
  align-items: center;
  justify-content: center;
}



@keyframes rainbow {
  100%,
  0% {
    color: rgb(255, 0, 0);
  }
  8% {
    color: rgb(255, 127, 0);
  }
  16% {
    color: rgb(255, 255, 0);
  }
  25% {
    color: rgb(127, 255, 0);
  }
  33% {
    color: rgb(0, 255, 0);
  }
  41% {
    color: rgb(0, 255, 127);
  }
  50% {
    color: rgb(0, 255, 255);
  }
  58% {
    color: rgb(0, 127, 255);
  }
  66% {
    color: rgb(0, 0, 255);
  }
  75% {
    color: rgb(127, 0, 255);
  }
  83% {
    color: rgb(255, 0, 255);
  }
  91% {
    color: rgb(255, 0, 127);
  }
}

.winner {
  animation: rainbow 4s infinite linear;
}

const ANSWER_LENGTH = 5;
const ROUNDS = 6;
const letters = document.querySelectorAll(".scoreboard-letter");
const loadingDiv = document.querySelector(".info-bar");


async function init() {
  // the state for the app
  let currentRow = 0;
  let currentGuess = "";
  let done = false;
  let isLoading = true;

 
  const res = await fetch("https://words.dev-apis.com/word-of-the-day");
  const { word: wordRes } = await res.json();
  const word = wordRes.toUpperCase();
  const wordParts = word.split("");
  isLoading = false;
  setLoading(isLoading);

 
  function addLetter(letter) {
    if (currentGuess.length < ANSWER_LENGTH) {
      currentGuess += letter;
    } else {
      current = currentGuess.substring(0, currentGuess.length - 1) + letter;
    }

    letters[currentRow * ANSWER_LENGTH + currentGuess.length - 1].innerText =
      letter;
  }

  
  async function commit() {
    if (currentGuess.length !== ANSWER_LENGTH) {
      // do nothing
      return;
    }

    isLoading = true;
    setLoading(isLoading);
    const res = await fetch("https://words.dev-apis.com/validate-word", {
      method: "POST",
      body: JSON.stringify({ word: currentGuess }),
    });
    const { validWord } = await res.json();
    isLoading = false;
    setLoading(isLoading);

    
    if (!validWord) {
      markInvalidWord();
      return;
    }

    const guessParts = currentGuess.split("");
    const map = makeMap(wordParts);
    let allRight = true;

    
    for (let i = 0; i < ANSWER_LENGTH; i++) {
      if (guessParts[i] === wordParts[i]) {
        // mark as correct
        letters[currentRow * ANSWER_LENGTH + i].classList.add("correct");
        map[guessParts[i]]--;
      }
    }

    
    for (let i = 0; i < ANSWER_LENGTH; i++) {
      if (guessParts[i] === wordParts[i]) {
        // do nothing
      } else if (map[guessParts[i]] && map[guessParts[i]] > 0) {
    
        allRight = false;
        letters[currentRow * ANSWER_LENGTH + i].classList.add("close");
        map[guessParts[i]]--;
      } else {
        
        allRight = false;
        letters[currentRow * ANSWER_LENGTH + i].classList.add("wrong");
      }
    }

    currentRow++;
    currentGuess = "";
    if (allRight) {
    
      alert("you win");
      document.querySelector(".brand").classList.add("winner");
      done = true;
    } else if (currentRow === ROUNDS) {
      
      alert(`you lose, the word was ${word}`);
      done = true;
    }
  }

  
  function backspace() {
    currentGuess = currentGuess.substring(0, currentGuess.length - 1);
    letters[currentRow * ANSWER_LENGTH + currentGuess.length].innerText = "";
  }

  
  function markInvalidWord() {
    for (let i = 0; i < ANSWER_LENGTH; i++) {
      letters[currentRow * ANSWER_LENGTH + i].classList.remove("invalid");

      setTimeout(
        () => letters[currentRow * ANSWER_LENGTH + i].classList.add("invalid"),
        10
      );
    }
  }

  
  document.addEventListener("keydown", function handleKeyPress(event) {
    if (done || isLoading) {
      return;
    }

    const action = event.key;

    if (action === "Enter") {
      commit();
    } else if (action === "Backspace") {
      backspace();
    } else if (isLetter(action)) {
      addLetter(action.toUpperCase());
    } else {
    }
  });
}


function isLetter(letter) {
  return /^[a-zA-Z]$/.test(letter);
}

function setLoading(isLoading) {
  loadingDiv.classList.toggle("hidden", !isLoading);
}


function makeMap(array) {
  const obj = {};
  for (let i = 0; i < array.length; i++) {
    if (obj[array[i]]) {
      obj[array[i]]++;
    } else {
      obj[array[i]] = 1;
    }
  }
  return obj;
}

init();
</style>  

</head>
  <body>
    <header class="navbar">
      <h1 class="brand">Word Masters</h1>
    </header>
    <div class="info-bar">
      <div class="spiral">ðŸŒ€</div>
    </div>
    <div class="scoreboard">
      <div class="scoreboard-letter" id="letter-0"></div>
      <div class="scoreboard-letter" id="letter-1"></div>
      <div class="scoreboard-letter" id="letter-2"></div>
      <div class="scoreboard-letter" id="letter-3"></div>
      <div class="scoreboard-letter" id="letter-4"></div>
      <div class="scoreboard-letter" id="letter-5"></div>
      <div class="scoreboard-letter" id="letter-6"></div>
      <div class="scoreboard-letter" id="letter-7"></div>
      <div class="scoreboard-letter" id="letter-8"></div>
      <div class="scoreboard-letter" id="letter-9"></div>
      <div class="scoreboard-letter" id="letter-10"></div>
      <div class="scoreboard-letter" id="letter-11"></div>
      <div class="scoreboard-letter" id="letter-12"></div>
      <div class="scoreboard-letter" id="letter-13"></div>
      <div class="scoreboard-letter" id="letter-14"></div>
      <div class="scoreboard-letter" id="letter-15"></div>
      <div class="scoreboard-letter" id="letter-16"></div>
      <div class="scoreboard-letter" id="letter-17"></div>
      <div class="scoreboard-letter" id="letter-18"></div>
      <div class="scoreboard-letter" id="letter-19"></div>
      <div class="scoreboard-letter" id="letter-20"></div>
      <div class="scoreboard-letter" id="letter-21"></div>
      <div class="scoreboard-letter" id="letter-22"></div>
      <div class="scoreboard-letter" id="letter-23"></div>
      <div class="scoreboard-letter" id="letter-24"></div>
      <div class="scoreboard-letter" id="letter-25"></div>
      <div class="scoreboard-letter" id="letter-26"></div>
      <div class="scoreboard-letter" id="letter-27"></div>
      <div class="scoreboard-letter" id="letter-28"></div>
      <div class="scoreboard-letter" id="letter-29"></div>
    </div>
    <script src="./word-masters.js"></script>
    
  </body>
</html>
